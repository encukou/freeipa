trigger:
- master

variables:
- template: templates/variables-common.yml
# platform specific variables, links to
- template: templates/variables.yml

jobs:
- job: Build
  pool:
    vmImage: $(VM_IMAGE)
  container:
    image: $(DOCKER_BUILD_IMAGE)
    options: --cap-add=SYS_PTRACE --security-opt seccomp=unconfined --privileged
  steps:
    - template: templates/${{ variables.PREPARE_BUILD_TEMPLATE }}
    - script: |
        set -e
        echo "Running autoconf generator"
        ./autogen.sh
      displayName: Configure the project
    - script: |
        set -e
        git update-ref refs/heads/$(System.PullRequest.TargetBranch) origin/$(System.PullRequest.TargetBranch)
        make V=0 "GIT_BRANCH=$(System.PullRequest.TargetBranch)" fastlint
      displayName: Quick code style check
      condition: eq(variables['Build.Reason'], 'PullRequest')
    - template: templates/${{ variables.BUILD_TEMPLATE }}
    - script: |
        set -e
        mkdir container
        cp -pr dist container/
        cp ipatests/azure/$(DOCKER_DOCKERFILE) container/Dockerfile
        cd container
        docker build -t freeipa-azure-builder .
        docker save freeipa-azure-builder | gzip > '$(builddir)/freeipa-azure-builder-container.tar.gz'
      displayName: Create container image for test
    - template: templates/publish-build.yml

- job: Lint
  pool:
    vmImage: $(VM_IMAGE)
  container:
    image: $(DOCKER_BUILD_IMAGE)
    options: --cap-add=SYS_PTRACE --security-opt seccomp=unconfined --privileged
  steps:
    - template: templates/${{ variables.PREPARE_BUILD_TEMPLATE }}
    - script: |
        set -e
        echo "Running autoconf generator"
        ./autogen.sh
      displayName: Configure the project
    - script: |
        set -e
        echo "Running make target 'lint'"
        make V=0 lint
      displayName: Lint sources

- job: Tox
  pool:
    vmImage: $(VM_IMAGE)
  container:
    image: $(DOCKER_BUILD_IMAGE)
    options: --cap-add=SYS_PTRACE --security-opt seccomp=unconfined --privileged
  steps:
    - template: templates/${{ variables.PREPARE_BUILD_TEMPLATE }}
    - task: UsePythonVersion@0
      inputs:
        versionSpec: 3.7
        architecture: x64
    - template: templates/${{ variables.PREPARE_TOX_TEMPLATE }}
    - script: |
        set -e
        echo "Running tox"
        export LANG=en_US.utf8
        export LC_CTYPE=en_US.utf8
        locale
        tox -e py37,pypi,pylint3
      displayName: Tox
    - task: PublishTestResults@2
      inputs:
        testResultsFiles: '.tox/**/junit-*.xml'
        testRunTitle: 'Tox results'
      condition: succeededOrFailed()

- job: WebUI_Unit_Tests
  pool:
    vmImage: $(VM_IMAGE)
  container:
    image: $(DOCKER_BUILD_IMAGE)
    options: --cap-add=SYS_PTRACE --security-opt seccomp=unconfined --privileged
  steps:
    - template: templates/${{ variables.PREPARE_BUILD_TEMPLATE }}
    - task: UsePythonVersion@0
      inputs:
        versionSpec: 3.7
        architecture: x64
    - template: templates/${{ variables.PREPARE_WEBUI_TEMPLATE }}
    - script: |
        set -e
        echo "Running autoconf generator"
        ./autogen.sh
      displayName: Configure the project
    - script: |
        set -e
        echo "Running WebUI unit tests"
        cd $(builddir)/install/ui/js/libs && make
        cd $(builddir)/install/ui && npm install
        cd $(builddir)/install/ui && node_modules/grunt/bin/grunt --verbose test
      displayName: WebUI Unit Tests
    - task: PublishTestResults@2
      inputs:
        testResultsFiles: 'install/ui/_build/test-reports/TEST-*.xml'
        testRunTitle: 'Web UI unit test results'
      condition: succeededOrFailed()

- job: BASE_XMLRPC
  pool:
    vmImage: $(VM_IMAGE)
  dependsOn: Build
  condition: succeeded()
  strategy:
    parallel: 3
  steps:
  - template: templates/test-jobs.yml
    parameters:
      testsToRun:
      - test_cmdline
      - test_install
      - test_ipaclient
      - test_ipalib
      - test_ipaplatform
      - test_ipapython
      - test_ipaserver
      - test_ipatests_plugins
      - test_xmlrpc
      testsToIgnore:
      - test_integration
      - test_webui
      - test_ipapython/test_keyring.py
      testsToDedicate:
      - test_xmlrpc/test_dns_plugin.py
      taskToRun: run-tests

- job: GATING
  pool:
    vmImage: $(VM_IMAGE)
  dependsOn: Build
  condition: succeeded()
  strategy:
    matrix:
      1_installation_TestInstallMaster_2_kerberos_flags:
        testsToRun_1: test_integration/test_installation.py::TestInstallMaster
        testsToRun_2: test_integration/test_kerberos_flags.py
        testsClients_2: 1

  timeoutInMinutes: 90

  steps:
  - script: |
      set -ex
      total_envs=0
      for project in $(seq ${{ variables.MAX_CONTAINER_ENVS }}); do
          # no more environments
          tests_varname="TESTSTORUN_$project"
          [ -z "${!tests_varname}" ] && break;
          let "total_envs=total_envs+1"
          echo "##vso[task.setvariable variable=projectID_$project]$project"

          nclients_varname="TESTSCLIENTS_$project"
          nclients_deref="${!nclients_varname}"
          echo "##vso[task.setvariable variable=ntestsClients_$project]${nclients_deref:-0}"
          nreplicas_varname="TESTSREPLICAS_$project"
          nreplicas_deref="${!nreplicas_varname}"
          echo "##vso[task.setvariable variable=ntestsReplicas_$project]${nreplicas_deref:-0}"
      done
      echo "##vso[task.setvariable variable=totalIPAEnvs]$total_envs"
    displayName: Generate environment variables

  - template: templates/test-jobs.yml
    parameters:
      taskToRun: run-integration-tests
      totalIPAEnvs: "$(totalIPAEnvs)"
      envs:
      - env1:
        id: "$(projectID)_1"
        testsToRun: "$(testsToRun)_1"
        topology:
          clients: "$(ntestsClients_1)"
          replicas: "$(ntestsReplicas_1)"
      - env2:
        id: "$(projectID)_2"
        testsToRun: "$(testsToRun)_2"
        topology:
          clients: "$(ntestsClients_2)"
          replicas: "$(ntestsReplicas_2)"
